.node-cache:
  image: node:18-alpine3.14
  before_script:
    - npm ci --cache .npm --prefer-offline  --include=dev
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
    policy: pull

.node:
  extends: .node-cache
  needs:
    - prepare

.node:npm-command:
  extends: .node
  variables:
    CWD: .
    NPM_COMMAND: test
  script:
    - cd ${CWD}
    - npm run ${NPM_COMMAND}

.node:lint:
  extends: .node:npm-command
  variables:
    NPM_COMMAND: lint

.node:test:unit:
  extends: .node:npm-command
  variables:
    NPM_COMMAND: test:unit
    COVERAGE_PATH: $CWD/dist/coverage
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - $COVERAGE_PATH

.node:build:
  extends: .node:npm-command
  variables:
    NPM_COMMAND: build
    ARTIFACT_PATH: $CWD/dist
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - $ARTIFACT_PATH

.node:gitlab:publish:
  variables:
    CWD: .
    PACKAGE_DIR: .
  image: node:latest
  script:
    - cd ${CWD}
    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - npm config set @${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/ --no-workspaces
    - npm config set ${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN} --no-workspaces

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi
    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      echo "publishing folder ${PACKAGE_DIR} as package ${NPM_PACKAGE_NAME}@${NPM_PACKAGE_VERSION}"
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions | grep ${NPM_PACKAGE_VERSION}) ]]; then
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      else
        npm publish ./${PACKAGE_DIR} --no-workspaces
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      fi

.node:npm:publish:
  variables:
    CWD: .
    PACKAGE_DIR: .
  image: node:latest
  script:
    - cd ${CWD}
    - npm config set //registry.npmjs.org/:_authToken=${NPM_TOKEN} --no-workspaces
    - npm whoami
    # Extract a few values from package.json
    - npm publish ./${PACKAGE_DIR} --no-workspaces --access public
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to NPM registry"
