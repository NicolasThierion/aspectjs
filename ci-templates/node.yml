.node-cache:
  image: node:18-alpine3.14
  before_script:
    - npm ci --cache .npm --prefer-offline  --include=dev
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - .npm/
    policy: pull

.node:
  extends: .node-cache
  needs:
    - prepare

.node:npm-command:
  extends: .node
  variables:
    CWD: .
    NPM_COMMAND: test
  script:
    - cd ${CWD}
    - npm run ${NPM_COMMAND}

.node:lint:
  extends: .node:npm-command
  variables:
    NPM_COMMAND: lint

.node:test:unit:
  extends: .node:npm-command
  variables:
    NPM_COMMAND: test:unit
    ARTIFACT_PATH: $CWD/dist/coverage
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - $COVERAGE_PATY
.node:build:
  extends: .node:npm-command
  variables:
    NPM_COMMAND: build
    ARTIFACT_PATH: $CWD/dist
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - $ARTIFACT_PATH

.node:gitlab:publish:
  image: node:latest
  script:
    # If no .npmrc is included in the repo, generate a temporary one that is configured to publish to GitLab's NPM registry
    - |
      if [[ ! -f .npmrc ]]; then
        echo 'No .npmrc found! Creating one now. Please review the following link for more information: https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#project-level-npm-endpoint-1'
        {
          echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/"
          echo "${CI_API_V4_URL#http*:}/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=\${CI_JOB_TOKEN}"
        } >> .npmrc
      fi
    - echo "Created the following .npmrc:"; cat .npmrc
    # Extract a few values from package.json
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")

    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#package-naming-convention'
        exit 1
      fi

    # Compare the version in package.json to all published versions.
    # If the package.json version has not yet been published, run `npm publish`.
    - |
      if [[ $(npm view "${NPM_PACKAGE_NAME}" versions) != *"'${NPM_PACKAGE_VERSION}'"* ]]; then
        npm publish
        echo "Successfully published version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} to GitLab's NPM registry: ${CI_PROJECT_URL}/-/packages"
      else
        echo "Version ${NPM_PACKAGE_VERSION} of ${NPM_PACKAGE_NAME} has already been published, so no new version has been published."
      fi

# publish:
#   stage: deploy
#   rules:
#     - if: '$CI_COMMIT_TAG =~ /^v(\d+\.)?(\d+\.)?(\*|\d+)$/'
#   before_script:
#     - apk add git
#     - yarn global add lerna
#   script:
#     - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}">.npmrc
#     - npm whoami
#     - lerna publish -y from-git

# docs:publish:
#   stage: deploy
#   rules:
#     - if: '$CI_COMMIT_TAG =~ /^v(\d+\.)?(\d+\.)?(\*|\d+)$/'
#   before_script:
#     - apk add git openssh-client
#     - mkdir -p ~/.ssh
#     - cp $GITHUB_SSH_PRIVATE_KEY ~/.ssh/id_rsa
#     - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
#     - chmod -R 600 ~/.ssh
#     - git config --global user.email "nicolas.thierion+ci@outlook.com"
#     - git config --global user.name "Gitlab Runner"
#   script:
#     - cd docs/.vuepress/dist
#     - git init
#     - git add . -A
#     - git commit -m"deploy doc"
#     - git push -f git@github.com:NicolasThierion/aspectjs.git master:gh-pages
